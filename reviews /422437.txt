# HW08
# stat.py
-	Pekny a citatelny kod ktory rozumne rozdeluje kod do mensich funkcii a velmi jednoducho je citatelny (mam na mysli funkcie get_mean, get_median, …) – potom v dalsich funkciach sa kod pouziva a znizuje sa  mentalna narocnost na pochopenie vacsich funkcii; pale chore
-	Riadok 54, 67 – funkcia parseDates/parseDeadlines pouziva camelCase namiesto zauzivaneho snake_case (ktory pouzivas jednak v subore a druhak sa pouziva celkovo v pythone)
-	Na sekvencii riadkov 113-121 sa mohla pouzit konstrukcia elif, kde by sa eliminovalo pouzitie 3 returnov a stacilo by tam dat potom napr. Len nakoniec jeden return
# student.py
-	Opat raz pekny a citatelny kod, chvalim
-	Funkcia get_regression_slope je relativne zlozita, hodilo by sa okomentovanie z high-level pohladu co robi a preco funguje. Z prveho pohladu je relativne zlozito citatelna a vyzaduje si viac casu na pochopenie ako ostatne kusy kodu
-	V hlavnom tele funkcie je zakomentovany kod (pravdepodobne vznikol pred riadko 107 a nasledne bol refaktorovany) ktory by sa tam nemusel nachadzat – staci odmazat
Celkovo je to pekny kod.

# HW10
# serve.py
-	Funkcia translate_path je celkom zbytocna, nakolko len vypise povodny argument a nasledne ho vrati a nic s nim nerobi – takisto sa nepouziva v kode a teda moze byt odmazana
-	Chybova hlaska na riadku 42 je po slovensky – je to bad practice mat kod a chybove hlasky v anglictine a pritom jednu hlasku v slovencine -> prelozit do anglictiny
-	Pri posielani response neposielas ziadny content-type zatial co posielas content-length -> pre niektorych klientov moze byt toto chybove spravanie a bolo by vhodne tam pridat aspon nejaky implicitny content-type
-	Pre znovupouzitelnost suboru by bolo vhodne zadeifnovat lepsiu chybovu hlasku pri spustani suboru ako je na riadku 75 “give me 2 args” nakolko ked si to clovek otvori po par mesiacoch tak nemusi hned vediet ake argumenty ma zadat (ci port, ci subor, ci port na 1. Alebo 2. Mieste, atd..)

# HW11
# game.py
-	Chvalim rozdelenie hlavnej logiky classy do separatneho suboru takze by sa dal pouzit v inom projekte
-	Datovy clen isDraw pouziva camelCase namiesto klasickeho snake_case – bolo by fajn dodrziavat konvencie
-	Datove cleny su public takze pouzite gettrov get_id a get_name sa mi zda zbytocne. Da sa zavolat napr: game = Game(); game.id namiesto game = Game(); game.get_id() – tymto by sa dokazal znizit celkovy pocet zbytocnych riadkov
-	Zbytocny prazdny riadok 41
-	Zbytocne 3 prazdne riadky 65-67 – konvencia je iba 2 riadky pre rozdelenie funkcii
-	Zbytocne 2 prazdne riadky 83-84 – zauzivana konvencia pre logicke rozdelenie kodu je 1 prazdny riadok
-	Vo funkcii print_game sa 3 krat opakuje rovnaka logika kodu pre vypisovanie znaku pre hraca – bolo by vhodne tuto logiku refaktorovat do separatnej funkcie a znizit tym celkovy pocet riadkov kodu
# ttt.py
-	Zbytocny prazdny riadok 18
-	Posielas header content-type s typom text/json ktory je nevalidny. Spravny content-type ma byt application/json pretoze to tak zadefinovala organizacia IANA (https://www.iana.org/)
-	Pouzivas globalne premenne GAMES/COUNTER co je zvacsa bad practice – zvazil by som refaktorizaciu bez ich pouzitia pretoze vo vacsich projektoch su globalne premenne zdrojom najviac bugov
-	Zbytocne  prazdne  riadky 41, 48, 53, 57, 58, 68, 81, 94, 95, 99, 110 ktore znizuju citatelny flow kodu


